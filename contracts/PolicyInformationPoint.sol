// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract EnvironmentContract {
    function isTailorAuthorized(
        string memory _tailorName
    ) public returns (bool) {}

    function isColorAllowed(string memory _color) public returns (bool) {}
}

/**
 * @title PolicyDecisionPoint1
 * @author
 * @notice Smart Policy, its code is not known at design time and is dynamically generated by the PAP based on an XACML policy
 */
contract PolicyInformationPoint {
    address private admin;
    address private pdp;
    EnvironmentContract private _envContr;

    constructor(address _environmentContract) {
        admin = msg.sender;
        pdp = address(0);
        _envContr = EnvironmentContract(_environmentContract);
    }

    function setPDP(address pdpAddr) public {
        if (msg.sender != admin) {
            revert();
        }

        pdp = pdpAddr;
    }

    function checkSender(address sender) private view {
        if (sender != pdp) {
            revert();
        }
    }

    function envIsColorAllowed(string memory _color) public returns (bool) {
        checkSender(msg.sender);
        return _envContr.isColorAllowed(_color);
    }

    function envIsTailorAuthorized(
        string memory _tailor
    ) public returns (bool) {
        checkSender(msg.sender);
        return _envContr.isColorAllowed(_tailor);
    }
}
